import RPi.GPIO as GPIO
import time
 
#GPIO Mode (BOARD / BCM)
GPIO.setmode(GPIO.BCM)
 
#set GPIO Pins
GPIO_TRIGGER = 21
GPIO_ECHO = 20
 
#set GPIO direction (IN / OUT)
GPIO.setup(GPIO_TRIGGER, GPIO.OUT)
GPIO.setup(GPIO_ECHO, GPIO.IN)
GPIO_LED = (17)
 
GPIO.setup(GPIO_LED, GPIO.OUT)


def distance():
    # set Trigger to HIGH
    GPIO.output(GPIO_TRIGGER, True)
 
    # set Trigger after 0.01ms to LOW
    time.sleep(0.00001)
    GPIO.output(GPIO_TRIGGER, False)
 
    StartTime = time.time()
    StopTime = time.time()
 
    # save StartTime
    while GPIO.input(GPIO_ECHO) == 0:
        StartTime = time.time()
 
    # save time of arrival
    while GPIO.input(GPIO_ECHO) == 1:
        StopTime = time.time()
 
    # time difference between start and arrival

    TimeElapsed = StopTime - StartTime
    # multiply with the sonic speed (34326 cm/s)
    # and divide by 2, because there and back
    distance = (TimeElapsed * 34326) / 2
 
    return distance
 
for x in range(10):
    dist = distance()
    time.sleep(0.1)
    distfn = distance() 
    #print ("Measured Distance = %.1f cm" % dist)
    f = open("ultrasounddata.csv", "a")
    f.write('\n'+"Actual Distance =, 49cm, Measured Distance, %.2f" % dist)
    time.sleep(0.1)
    
    velocity= (dist-distfn)/0.1
    
    dist1 = distance()
    time.sleep(0.1)
    dist2 = distance() 
    #print ("Measured Distance = %.1f cm" % dist)
    f = open("ultrasounddata.csv", "a")
    f.write('\n'+"Actual Distance =, 49cm, Measured Distance, %.2f" % dist)
    time.sleep(0.1)
    
    velocity2= (dist1-dist2)/0.1
    
    acceleration= (velocity2-velocity)/0.1
    print(acceleration)
    
    if (dist < 5):
         GPIO.output(GPIO_LED,GPIO.HIGH)
         print("WARNING!!!!")
    else:
         GPIO.output(GPIO_LED,GPIO.LOW)
         

         
    


GPIO.cleanup()
